KNOWN ISSUES

When run for the first time, the block chain needs to be downloaded. For testnet, this currently
takes around 5-10 minutes on a WLAN. When the sync icon in the status disappears, the download is
finished and the wallet is on the top of the block chain.

Sometimes you will get system notifications about the same incoming Bitcoins multiple times. You
still get the coins only once. 


FILES

/data/data/de.schildbach.wallet/files/wallet-protobuf (MODE_PRIVATE)
	Wallet for prodnet

/data/data/de.schildbach.wallet_test/files/wallet-protobuf-testnet (MODE_WORLD_READABLE | MODE_WORLD_WRITEABLE)
	Wallet for testnet

The wallet file format is not compatible to wallet.dat (Satoshi client).

/data/data/de.schildbach.wallet/files/key-backup-base58 (MODE_PRIVATE)
	Backups of private keys for prodnet

/data/data/de.schildbach.wallet_test/files/key-backup-base58-testnet (MODE_WORLD_READABLE | MODE_WORLD_WRITEABLE)
	Backups of private keys for testnet


DEBUGGING

Wallet file for testnet can be pulled from (even unrooted) device using

	adb pull /data/data/de.schildbach.wallet_test/files/wallet-protobuf-testnet

Backups of key for testnet can be pulled from device using

	adb pull /data/data/de.schildbach.wallet_test/files/key-backup-asn1-testnet
	adb pull /data/data/de.schildbach.wallet_test/files/key-backup-base58-testnet

Log messages can be viewed by

	adb logcat


SETTING UP FOR DEVELOPMENT

Make sure you've got Eclipse 3.7 (Indigo) with ADT 16 installed.

Use https://github.com/mosabua/maven-android-sdk-deployer to deploy all Android components to
your local Maven repository.

Use Git to check out the project to your workspace:

  git clone https://code.google.com/p/bitcoin-wallet/ bitcoin-wallet

Change to that directory.

Use the maven-eclipse-plugin to create Eclipse project files:

  mvn eclipse:eclipse

Optional: In the generated .classpath, remove the org.eclipse.jdt.launching.JRE_CONTAINER
classpath entry. It does not belong there, but cannot be excluded from being generated currently.

In Eclipse, use File -> Import -> General -> Existing Project into Workspace to import project.

If you see loads of "should be tagged with @Override" errors, set

  Project -> Properties -> Java Compiler -> Errors/Warnings -> Annotations ->
  Missing @Override annotation to 'Warning'


NFC (Near field communication)

Bitcoin Wallet supports reading Bitcoin requests via NFC, either from a passive NFC tag or from
another NFC capable Android device that is requesting coins.

For this to work, just enable NFC in your phone and hold your phone to the tag or device (with
the "Request coins" dialog open). The "Send coins" dialog will open with fields populated.

Instructions for preparing an NFC tag with your address:

- We have successfully tested this NFC tag writer:
  https://play.google.com/store/apps/details?id=com.nxp.nfc.tagwriter
  Other writers should work as well, let us know if you succeed.

- Some tags have less than 50 bytes capacity, those won't work. 1 KB tags recommended.

- The tag needs to contain a Bitcoin URI. You can construct one with the "Request coins" dialog,
  then share with messaging or email. You can also construct the URI by hand. Example for Prodnet:
  bitcoin:1G2Y2jP5YFZ5RGk2PXaeWwbeA5y1ZtFhoL

- The type of the message needs to be URI or URL (not Text).

- If you put your tag at a public place, don't forget to enable write protect. Otherwise, someone
  could overwrite the tag with his own Bitcoin address.


BITCOINJ

Bitcoin Wallet uses BitCoinJ for Bitcoin specific logic:

http://code.google.com/p/bitcoinj/

Delta to upstream BitCoinJ:

- Basic support for transaction fees

- Bouncycastle library is still embedded (re-packaged), rather than just declared as a required dependency
